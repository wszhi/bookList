package com.booklist.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.booklist.bean.Book;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BOOK".
*/
public class BookDao extends AbstractDao<Book, Void> {

    public static final String TABLENAME = "BOOK";

    /**
     * Properties of entity Book.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", false, "ID");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Pubdate = new Property(2, String.class, "pubdate", false, "PUBDATE");
        public final static Property Publisher = new Property(3, String.class, "publisher", false, "PUBLISHER");
        public final static Property Image = new Property(4, String.class, "image", false, "IMAGE");
        public final static Property Summary = new Property(5, String.class, "summary", false, "SUMMARY");
    };


    public BookDao(DaoConfig config) {
        super(config);
    }
    
    public BookDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BOOK\" (" + //
                "\"ID\" TEXT NOT NULL ," + // 0: id
                "\"TITLE\" TEXT NOT NULL ," + // 1: title
                "\"PUBDATE\" TEXT NOT NULL ," + // 2: pubdate
                "\"PUBLISHER\" TEXT NOT NULL ," + // 3: publisher
                "\"IMAGE\" TEXT NOT NULL ," + // 4: image
                "\"SUMMARY\" TEXT NOT NULL );"); // 5: summary
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BOOK\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Book entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getId());
        stmt.bindString(2, entity.getTitle());
        stmt.bindString(3, entity.getPubdate());
        stmt.bindString(4, entity.getPublisher());
        stmt.bindString(5, entity.getImage());
        stmt.bindString(6, entity.getSummary());
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public Book readEntity(Cursor cursor, int offset) {
        Book entity = new Book( //
            cursor.getString(offset + 0), // id
            cursor.getString(offset + 1), // title
            cursor.getString(offset + 2), // pubdate
            cursor.getString(offset + 3), // publisher
            cursor.getString(offset + 4), // image
            cursor.getString(offset + 5) // summary
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Book entity, int offset) {
        entity.setId(cursor.getString(offset + 0));
        entity.setTitle(cursor.getString(offset + 1));
        entity.setPubdate(cursor.getString(offset + 2));
        entity.setPublisher(cursor.getString(offset + 3));
        entity.setImage(cursor.getString(offset + 4));
        entity.setSummary(cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(Book entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(Book entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
